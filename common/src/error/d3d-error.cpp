#include <common/error/d3d-error.h>
#include <d3d8.h>
#include <map>

#define DEFINE_HRESULT_ERROR(hr) \
    {                            \
        hr, #hr                  \
    }

// clang-format off
 const static std::map<HRESULT, const char*> DX_ERRORS = {
    DEFINE_HRESULT_ERROR(D3D_OK),
    DEFINE_HRESULT_ERROR(D3DERR_WRONGTEXTUREFORMAT),
    DEFINE_HRESULT_ERROR(D3DERR_UNSUPPORTEDCOLOROPERATION),
    DEFINE_HRESULT_ERROR(D3DERR_UNSUPPORTEDCOLORARG),
    DEFINE_HRESULT_ERROR(D3DERR_UNSUPPORTEDALPHAOPERATION),
    DEFINE_HRESULT_ERROR(D3DERR_UNSUPPORTEDALPHAARG),
    DEFINE_HRESULT_ERROR(D3DERR_TOOMANYOPERATIONS),
    DEFINE_HRESULT_ERROR(D3DERR_CONFLICTINGTEXTUREFILTER),
    DEFINE_HRESULT_ERROR(D3DERR_UNSUPPORTEDFACTORVALUE),
    DEFINE_HRESULT_ERROR(D3DERR_CONFLICTINGRENDERSTATE),
    DEFINE_HRESULT_ERROR(D3DERR_UNSUPPORTEDTEXTUREFILTER),
    DEFINE_HRESULT_ERROR(D3DERR_CONFLICTINGTEXTUREPALETTE),
    DEFINE_HRESULT_ERROR(D3DERR_DRIVERINTERNALERROR),

    DEFINE_HRESULT_ERROR(D3DERR_NOTFOUND),
    DEFINE_HRESULT_ERROR(D3DERR_MOREDATA),
    DEFINE_HRESULT_ERROR(D3DERR_DEVICELOST),
    DEFINE_HRESULT_ERROR(D3DERR_DEVICENOTRESET),
    DEFINE_HRESULT_ERROR(D3DERR_NOTAVAILABLE),
    DEFINE_HRESULT_ERROR(D3DERR_OUTOFVIDEOMEMORY),
    DEFINE_HRESULT_ERROR(D3DERR_INVALIDDEVICE),
    DEFINE_HRESULT_ERROR(D3DERR_INVALIDCALL),
    DEFINE_HRESULT_ERROR(D3DERR_DRIVERINVALIDCALL),

    DEFINE_HRESULT_ERROR(E_OUTOFMEMORY),
};
// clang-format on

const char* get_d3d_error_str(HRESULT hr)
{
    auto it = DX_ERRORS.find(hr);
    if (it != DX_ERRORS.end())
        return it->second;
    return nullptr;
}
